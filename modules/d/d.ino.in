#include <BUMMSlave.h>

#include "pin_definitions.h"
#include "debounce.h"

#define PAUSE_LENGTH 2
#define MAX_ROUNDS %s

#define REVISION 0

BUMMSlave bs('d', REVISION, MAX_ROUNDS, PIN_STATUS_RED, PIN_STATUS_GREEN);

%s

volatile uint8_t current_iteration = 0;
volatile uint8_t current_pattern;
volatile uint8_t current_pattern_length;
volatile uint8_t current_pattern_i;
volatile uint8_t num_iterations;

void onModuleInit()
{
	uint8_t difficulty = 10*(bs.serialNumber[0]-'0') + (bs.serialNumber[1]-'0');
	current_iteration = 0;
	current_pattern = bs.randomSeeds[0];
	current_pattern_i = 0;

	%s
}

void setup()
{
	// clear timer on ICR1
	TCCR1A &= ~(0x03);
	TCCR1B |= (1<<WGM13) | (1<<WGM12);

	// match interrupt and overflow interrupt
	TIMSK1 |= (1<<OCIE1A) | (1<<OCIE1B);
	
	// disable timer
	TCCR1B &= ~( (1<<CS12) | (1<<CS11) | (1<<CS10) );

	// B-interrupt on wrap
	OCR1A = 0;

	PIN_LED_GREEN_DDR |= (1<<PIN_LED_GREEN_BIT);
	PIN_LED_RED_DDR |= (1<<PIN_LED_RED_BIT);
	pinMode(PIN_BTN_GREEN, INPUT_PULLUP);
	pinMode(PIN_BTN_RED, INPUT_PULLUP);

	DDRB |= (1<<0);

	bs.begin();
}

void onGameEnd(uint8_t result)
{
	// disable timer
	TCCR1B &= ~( (1<<CS12) | (1<<CS11) | (1<<CS10) );

	PIN_LED_GREEN_PORT &= ~(1<<PIN_LED_GREEN_BIT);
	PIN_LED_RED_PORT &= ~(1<<PIN_LED_RED_BIT);
}


void onGameStart()
{
	// enable timer to 1024 prescaler (16kHz)
	TCCR1B &= ~(1<<CS11);
	TCCR1B |= (1<<CS12) | (1<<CS10);
}

ISR(TIMER1_COMPB_vect)
{
	PORTB ^= (1<<0);
	PIN_LED_GREEN_PORT &= ~(1<<PIN_LED_GREEN_BIT);
	PIN_LED_RED_PORT &= ~(1<<PIN_LED_RED_BIT);
}

ISR(TIMER1_COMPA_vect)
{
//	PORTB ^= (1<<0);
	if(++current_pattern_i > current_pattern_length + PAUSE_LENGTH)
		current_pattern_i = 0;
	if(current_pattern_i < current_pattern_length)
	{
		uint8_t pattern_mask = (1<<(current_pattern_length-1-current_pattern_i));
		if(current_pattern & pattern_mask)
			PIN_LED_RED_PORT |= (1<<PIN_LED_RED_BIT);
		else
			PIN_LED_GREEN_PORT |= (1<<PIN_LED_GREEN_BIT);
	}
}


// returns true if defused by this iteration
uint8_t increment_iteration_defuses()
{
	if(++current_iteration >= num_iterations)
		return true;
	current_pattern = bs.randomSeeds[current_iteration];
	return false;
}
uint8_t get_lookuptable_from_serial(uint8_t number)
{
	uint8_t difficulty = 10*(bs.serialNumber[0]-'0') + (bs.serialNumber[1]-'0');
	%s
}

char get_command_code()
{
	uint8_t mask = (1<<current_pattern_length) - 1;
	uint8_t rand_val = bs.randomSeeds[current_iteration] & mask;
	return get_lookuptable_from_serial(rand_val);
}

uint8_t should_press_red_next(char command_code)
{
	switch(command_code)
	{
	%s
	default:
		// TODO: set error
		return 0;
	}
}
void red_pressed(uint8_t red)
{
	uint8_t ok = false;
	char command_code = get_command_code();
	uint8_t spr = should_press_red_next(command_code);
	if( spr && red)
		ok = true;
	else if ( (!spr) && (!red) )
		ok = true;

	if(ok)
	{
		if(increment_iteration_defuses())
			bs.disarm();
	}
	else
		bs.disarmFailed();
}

void loop()
{
	bs.loop();

	if(bs.isArmed())
	{
		uint8_t status_green = get_debounced_flank(PIN_BTN_GREEN);
		uint8_t status_red = get_debounced_flank(PIN_BTN_RED);
		
		if(status_green == HIGH)
			red_pressed(false);
		if(status_red == HIGH)
			red_pressed(true);
	}
}



void onGameStatusUpdate()
{
}
